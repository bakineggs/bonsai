Roadmap:
  1) Implement an interpreter in the most straight-forward way possible while building up a good test suite
  2) Bootstrap! (write an okk interpreter using okk)
  3) Write a compiler that creates an interpreter from a set of rules
  4) Build a distributed interpreter? (or a compiler that builds a distributed interpreter?)

Tests For:
  Parsing:
    Rule:
      make sure conditions != NULL

    Condition:
      make sure creates_node = true and matches_node = true can't happen
      make sure removes_node = true and matches_node = false can't happen
      make sure creates_node = true and removes_node = true can't happen
      make sure creates_node = true and exact = true can't happen
      make sure variable != NULL and children != NULL can't happen
      make sure creates_node = true and multiple = true can't happen
      make sure matches_node = false and multiple = true can't happen
      make sure creates_node = true and excludes_node = true can't happen
      make sure removes_node = true and excludes_node = true can't happen
      make sure matches_node = true and excludes_node = true can't happen

    Node:
      make sure only one of children, integer_value, float_value, or string_value can be != NULL

  Evaluation:
    make sure ordered conditions can't run on unordered nodes

Implement:
  parse user-defined code assignment to value
  parse single-line strings
  parse multi-line strings
  parse variables

numeric & string values in rules?
